<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Methods</title>
<link href="../../scriptcase.css" rel="stylesheet" type="text/css">
</head>
<body>
   <link href="../../scriptcase.css" rel="stylesheet" type="text/css">
<H1>Methods</H1>
<p>Methods are functions or procedures declared by the developer, to support the implementation of business rules for an application. Using methods in applications it is possible to reuse code and thus improve development productivity. <span>It is possible to create PHP and JAVASCRIPT methods. </span></P>
<p><img src="../../comuns/programacao/img/methods_found.jpg" /><span class="sob_figura">Figure 1: Method menu interface.</span></P>
<h2>Creating a new method</h2>
<p><img src="../../comuns/programacao/img/novo_metodo.jpg"><br />
<span class="sob_figura">Figure 2: Create a new Method.</span></p>
<p><STRONG>1.</STRONG> Define the name for the new method then click the Create button. See the Figure below.</P>
<p><IMG SRC="../../comuns/programacao/img/inclusao_metodo.jpg"> <BR>
    <span class="sob_figura">Figure 3: Adding a Method.</span></P>
<p>&nbsp;</P>
<p>&nbsp;</P>
<p><STRONG>2</STRONG> Methods may involve parameters being passed.<span> 
  <p>&nbsp;</p>
    <p>Add the number of variables:</p>
    <p><img src="../../comuns/programacao/img/method_parameter_add.jpg"></p>
    <p><span class="sob_figura">Figure 5: Define Parameters interface</span></p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <p>Defining a variable: </p>
    <p><img src="../../comuns/programacao/img/method_parameter_add_2.jpg"> </p>
    <p><span class="sob_figura">Figure 6: Add Parameters interface.</span></p>
    <p>&nbsp;</p>
    <p><span><strong>Name:</strong> Input a variable name.</span></p>
    <p><span><strong>Type:</strong> Select the variable type as: <em>For value</em> or <em>For reference.</em> * 10270</p>
    <p><span><strong>Value Default:</strong> The default value used to initialize the parameter variable when called</span>.</p>
    <p>* References allow you to create a second name for a variable so you can use it to read or modify the original data stored in that variable. </p>
    <p>&nbsp;</p>
    
    <p><img src="../../comuns/programacao/img/method_parameter_add_3.jpg" /></p>
    <p><span class="sob_figura">Figure 7: Define Method Parameters interface.</span></p>
    <p>&nbsp;</p>
    <p><img src="../../comuns/programacao/img/select_all.jpg"><span> Select all parameter variables in the Parameters field. </span></p>
    <p><img src="../../comuns/programacao/img/select_none.jpg" > Unmark all parameter variables selected in the Parameters field. </p>
    <p><img src="../../comuns/programacao/img/edit.jpg"> Edit the variable selected in the Parameters field. </p>
    <p><img src="../../comuns/programacao/img/delete.jpg"> Delete the variable selected in the Parameters field. </p>
<p>&nbsp;</P>
<p>&nbsp;</P>

<p><STRONG>3</STRONG> In order to run a method, it needs to be called within an event. See the example below:</P>
<p><IMG SRC="../../comuns/programacao/img/eventos.jpg"><BR>
    <span class="sob_figura">Figure 8: Events.</span></P>
<p>In this example we are using the onLoad event to call our method when the record is loaded. See how simple it is to call the method in the example below:</P>
  <p>Using a method : </p>
  <p><IMG SRC="../../comuns/programacao/img/method_procedure.jpg"><BR>
    <span class="sob_figura">Figure 9: Event method interface </span><BR>
  </p>
<p>&nbsp;</P>
<p>Thus we get the following result when running the application.</P>
<p><IMG SRC="../../comuns/programacao/img/controle_evento.jpg"></P>

</body>
</html>
